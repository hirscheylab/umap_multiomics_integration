---
title: "SUB-BENCHMARK 5: Comparing jDR methods on DepMap datasets"
format: html
editor: visual
---

# SUB-BENCHMARK 5: Comparing jDR methods on DepMap datasets

We subset the same lineages we used for TCGA comparison (benchmark #2).

## Data preprocessing

```{r}
# Function from POMA package - BiocManager::install("POMA")
cleaning_multiomics <- function(data,
                                zero_cutoff = 0.3,
                                na_cutoff = 0.3) {
  
   data <- data %>%
     dplyr::rename("id" = 1) %>%
     tibble::column_to_rownames("id")

   ## Remove columns that only have NAs
   data <- data[, apply(data, 2, function(x) !all(is.na(x)))]

   ## Remove columns that only have zeros
   data <- data[, apply(data, 2, function(x) !all(x == 0, na.rm = TRUE))]

   ## Remove columns with var = 0
   data <- data[, !apply(data, 2, function(x){var(x, na.rm = TRUE)}) == 0]

   ## Remove columns that with more than x% of zeros
   data <- data[, colSums(data == 0, na.rm = TRUE)/nrow(data) < zero_cutoff]

   ## Remove columns that with more than x% of NAs
   data <- data[, !apply(data, 2, function(x){sum(is.na(x))/nrow(data)}) > na_cutoff]

   ## KNN imputation
   data <- t(data)
   data <- impute::impute.knn(data)
   data <- t(data$data)

   data <- apply(data, 2, function(x) (log(x + 1) - mean(log(x + 1), na.rm = TRUE))/sd(log(x + 1), na.rm = TRUE))

   data <- data %>%
     as.data.frame() %>%
     rownames_to_column("id")

   return(data)
}
```

```{r}
library(tidyverse)

# We excluded 'sarcoma' because there are too many subtypes in DepMap
tcga_lineages <- c('AML', 'breast', 'colorectal', 'kidney', 'liver', 'ovary', 'melanoma')

sample_info <- vroom::vroom("../data/DepMap/sample_info.csv", delim = ",") %>% 
  dplyr::select(DepMap_ID, lineage, lineage_subtype) %>% 
  dplyr::mutate(lineage = dplyr::case_when(lineage %in% c("skin", "blood") ~ lineage_subtype,
                                           !lineage %in% c("skin", "blood") ~ lineage)) %>% 
  dplyr::filter(lineage %in% tcga_lineages) %>% 
  dplyr::select(DepMap_ID, lineage) %>% 
  dplyr::arrange(DepMap_ID)

# EXPRESSION --------------------------
expression <- vroom::vroom("../data/DepMap/Expression_22Q2_Public.csv", delim = ",") %>% 
  dplyr::rename(DepMap_ID = 1) %>% 
  dplyr::filter(DepMap_ID %in% sample_info$DepMap_ID)

# METHYLATION --------------------------
methylation <- vroom::vroom("../data/DepMap/Methylation_(1kb_upstream_TSS).csv", delim = ",") %>% 
  dplyr::rename(DepMap_ID = 1) %>% 
  dplyr::filter(DepMap_ID %in% sample_info$DepMap_ID)

# miRNA --------------------------
mirna <- vroom::vroom("../data/DepMap/miRNA_Expression.csv", delim = ",") %>% 
  dplyr::rename(DepMap_ID = 1) %>% 
  dplyr::filter(DepMap_ID %in% sample_info$DepMap_ID)

# METABOLOMICS --------------------------
metabolomics <- vroom::vroom("../data/DepMap/Metabolomics.csv", delim = ",") %>% 
  dplyr::rename(DepMap_ID = 1) %>% 
  dplyr::filter(DepMap_ID %in% sample_info$DepMap_ID)

# ALL CELLS --------------------------
all_cells <- dplyr::intersect(expression$DepMap_ID, methylation$DepMap_ID)
all_cells <- dplyr::intersect(mirna$DepMap_ID, all_cells)
all_cells <- dplyr::intersect(metabolomics$DepMap_ID, all_cells)

# EXPRESSION --------------------------
expression_clean <- expression %>%
  dplyr::filter(DepMap_ID %in% all_cells)

expression_clean <- cleaning_multiomics(expression_clean)

sum(apply(expression_clean, 2, function(x){sum(is.na(x))}))

# METHYLATION --------------------------
methylation_clean <- methylation %>%
  dplyr::filter(DepMap_ID %in% all_cells)

methylation_clean <- cleaning_multiomics(methylation_clean)

sum(apply(methylation_clean, 2, function(x){sum(is.na(x))}))

# miRNA --------------------------
mirna_clean <- mirna %>%
  dplyr::filter(DepMap_ID %in% all_cells)

mirna_clean <- cleaning_multiomics(mirna_clean)

sum(apply(mirna_clean, 2, function(x){sum(is.na(x))}))

# METABOLOMICS --------------------------
metabolomics_clean <- metabolomics %>%
  dplyr::filter(DepMap_ID %in% all_cells)

metabolomics_clean <- cleaning_multiomics(metabolomics_clean)

sum(apply(metabolomics_clean, 2, function(x){sum(is.na(x))}))

# ARRANGE ALL --------------------------
expression_clean <- expression_clean %>%
  dplyr::arrange(id) %>% 
  dplyr::select(id, sort(tidyselect::peek_vars())) %>% 
  tibble::column_to_rownames("id")

methylation_clean <- methylation_clean %>%
  dplyr::arrange(id) %>% 
  dplyr::select(id, sort(tidyselect::peek_vars())) %>% 
  tibble::column_to_rownames("id")

mirna_clean <- mirna_clean %>%
  dplyr::arrange(id) %>% 
  dplyr::select(id, sort(tidyselect::peek_vars())) %>% 
  tibble::column_to_rownames("id")

metabolomics_clean <- metabolomics_clean %>%
  dplyr::arrange(id) %>% 
  dplyr::select(id, sort(tidyselect::peek_vars())) %>% 
  tibble::column_to_rownames("id")

sample_info <- sample_info %>% 
  dplyr::filter(DepMap_ID %in% all_cells)

# Save
write.table(t(expression_clean), "../data/DepMap/expression.txt", 
            sep="\t", col.names=TRUE, row.names=TRUE)
write.table(t(methylation_clean), "../data/DepMap/methylation.txt", 
            sep="\t", col.names=TRUE, row.names=TRUE)
write.table(t(mirna_clean), "../data/DepMap/mirna.txt", 
            sep="\t", col.names=TRUE, row.names=TRUE)
write.table(t(metabolomics_clean), "../data/DepMap/metabolomics.txt", 
            sep="\t", col.names=TRUE, row.names=TRUE)

save(expression_clean, methylation_clean, mirna_clean, metabolomics_clean, sample_info,
     file = "../data/DepMap/depmap_multiomics.RData")
```

## Running comparison

```{r}
source("runfactorization.R")

# Folder for results
results_folder <- "../results_DepMap/"
# Create output folder
dir.create(results_folder, showWarnings = FALSE)

# Run factorization methods
out <- runfactorization("../data/DepMap/",
                        c("expression.txt", "methylation.txt", "mirna.txt", "metabolomics.txt"),
                        num.factors = 2, 
                        min_pts = 10, # manual tuning
                        compute_features = FALSE,
                        sep="\t", 
                        filtering="stringent")

save(out, file = "../results_DepMap/factorization.RData")
```

```{r}
library("ggplot2")
library("clusterCrit")

# Parameters for the plots
dot_size <- 1.5
dot_alpha <- 1.0
xlabel <- "Factor 1"
ylabel <- "Factor 2"

c_index <- numeric(0)

# For each factorization method
for(i in 1:length(out$factorizations)){
    
    # Get factorization result
    factors <- out$factorizations[[i]][[1]]

    # Delete NAs
    factors <- factors[!is.na(factors[,1]) & !is.na(factors[,2]), ]
    sample_annot <- sample_info

    # Data to be plotted
    df <- data.frame(x =  factors[,1], y = factors[,2], lineage = sample_annot[,2])
    # Plot results
    p <- ggplot(df, aes_string(x = "x", y = "y")) + 
       geom_point(aes(color = lineage), size=dot_size, alpha=dot_alpha) + 
       xlab(xlabel) + ylab(ylabel) +
       # scale_shape_manual(values=c(19,1,2:18)[seq_along(unique(shape_by))]) +
       theme(plot.margin = margin(20, 20, 10, 10), 
             axis.text = element_text(size = rel(1), color = "black"), 
             axis.title = element_text(size = 16), 
             axis.title.y = element_text(size = rel(1.1), margin = margin(0, 10, 0, 0)), 
             axis.title.x = element_text(size = rel(1.1), margin = margin(10, 0, 0, 0)), 
             axis.line = element_line(color = "black", size = 0.5), 
             axis.ticks = element_line(color = "black", size = 0.5),
             panel.border = element_blank(), 
             panel.grid.major = element_blank(),
             panel.grid.minor = element_blank(), 
             panel.background = element_blank(),
             legend.key = element_rect(fill = "white"),
             legend.text = element_text(size = 16),
             legend.title = element_text(size =16)
       )
    p + scale_color_viridis_d(end = 0.8)
    # Export plot as JPEG image
    ggsave(paste0(results_folder, "plot_", out$method[i],".jpg"))

    # Encode cell type annotations by numeric codes
    ann <- factor(sample_annot$lineage)
    ann <- as.integer(ann)
    # Compare factors and annotations
    c_index <- c(c_index, intCriteria(as.matrix(factors), as.integer(ann), crit=c("C_index"))$c_index)

}

# Build output table
report_cindex <- data.frame(method=out$method, cindex=c_index)

# Export results as one tab-separated table
write.table(report_cindex, file = paste0(results_folder, "depmap_cindex.txt"), 
            sep="\t", col.names=FALSE, row.names=FALSE, quote=FALSE)
```

### jDR Clusters vs groud truth lineage

```{r}
depmap_cluster_comparison <- function(out) {
  
  clusters_df <- list()
  for (i in 1:length(out$factorizations)) {
    
    if (out$method[i] == "UBMI" || out$method[i] == "intNMF") {
      if (out$method[i] == "UBMI") {
        clust_iCluster <- as.matrix(out$UBMI.clusters)
      } else {
        clust_iCluster <- as.matrix(out$intNMF.clusters)
      }
    } else {
      factors <- out$factorizations[[i]][[1]]
      
      ## Clustering by Kmeans
      for (run in 1:1000) {
        kmeans.out <- kmeans(factors, centers = length(tcga_lineages))
        clust_iCluster <- as.matrix(kmeans.out$cluster)
      }
    }
    
    clusters_df[[i]] <- as.numeric(clust_iCluster)
    
    print(paste0("Done ", out$method[i], "!"))
  }
  
  clusters <- dplyr::bind_cols(clusters_df)
  colnames(clusters) <- out$method
  
  return(clusters)
}

out_clust_depmap <- depmap_cluster_comparison(out)
save(out_clust_depmap, file = paste0(results_folder, "depmap_clusters.RData"))
```

```{r}
library(mclust)

ari_value <- list()
for (i in 1:length(out$method)) {
 ari_value[[i]] <- adjustedRandIndex(sample_info$lineage, unlist(out_clust_depmap[,i])) 
}

ari_value <- round(unlist(ari_value), 3)
```

```{r}
## Final plots
rgcca <- as.data.frame(out$factorizations[[1]][[1]])
rgcca$method <- "RGCCA"
colnames(rgcca)[1:2] <- c("factor1", "factor2")

mcia <- as.data.frame(out$factorizations[[2]][[1]])
mcia$method <- "MCIA"
colnames(mcia)[1:2] <- c("factor1", "factor2")

mofa <- as.data.frame(out$factorizations[[3]][[1]])
mofa$method <- "MOFA"
colnames(mofa)[1:2] <- c("factor1", "factor2")

intnmf <- as.data.frame(out$factorizations[[4]][[1]])
intnmf$method <- "intNMF"
colnames(intnmf)[1:2] <- c("factor1", "factor2")

jive <- as.data.frame(out$factorizations[[5]][[1]])
jive$method <- "JIVE"
colnames(jive)[1:2] <- c("factor1", "factor2")

tica <- as.data.frame(out$factorizations[[6]][[1]])
tica$method <- "tICA"
colnames(tica)[1:2] <- c("factor1", "factor2")

ubmi <- as.data.frame(out$factorizations[[7]][[1]])
ubmi$method <- "UBMI"
colnames(ubmi)[1:2] <- c("factor1", "factor2")

## Merge methods C-INDEX
all_depmap_cindex <- rbind(rgcca, mcia, mofa, intnmf, jive, tica, ubmi) %>%
  as.data.frame() %>%
  rownames_to_column("id") %>%
  mutate(lineage = rep(sample_info$lineage, length(out$factorizations))) %>%
  left_join(report_cindex, by = "method") %>%
  mutate(cindex = round(cindex, 3))

## Merge methods ARI
### Repeat each element n times
ari_value_reps <- rep(ari_value, each = nrow(out$factorizations[[1]][[1]]))

all_depmap_ari <- rbind(rgcca, mcia, mofa, intnmf, jive, tica, ubmi) %>% 
  as.data.frame() %>% 
  rownames_to_column("id") %>% 
  mutate(ari = ari_value_reps)
```

```{r}
calculate_cluster_purity <- function(clusters, lineages) {
  unique_clusters <- unique(clusters)
  cluster_purity_list <- numeric(length(unique_clusters))
  
  for (i in seq_along(unique_clusters)) {
    cluster <- unique_clusters[i]
    # Subset lineages in the current cluster
    lineages_in_cluster <- lineages[clusters == cluster]
    # Most common lineage in the cluster
    most_common_lineage <- names(sort(table(lineages_in_cluster), decreasing = TRUE)[1])
    # Purity calculation
    purity <- max(table(lineages_in_cluster)) / length(lineages_in_cluster)
    cluster_purity_list[i] <- purity
  }
  
  # Overall purity (weighted by cluster size)
  overall_purity <- sum(cluster_purity_list * table(clusters)) / length(clusters)
  
  return(list(cluster_purities = cluster_purity_list, overall_purity = overall_purity))
}

cluster_purity <- list()
for (i in 1:length(out$method)) {
 cluster_purity[[i]] <- calculate_cluster_purity(unlist(out_clust_depmap[,i]), sample_info$lineage)$overall_purity
}

cluster_purity <- round(unlist(cluster_purity), 3)

## Merge methods PURITY
### Repeat each element n times
cluster_purity_reps <- rep(cluster_purity, each = nrow(out$factorizations[[1]][[1]]))

all_depmap_purity <- rbind(rgcca, mcia, mofa, intnmf, jive, tica, ubmi) %>% 
  as.data.frame() %>% 
  rownames_to_column("id") %>% 
  mutate(purity = cluster_purity_reps)
```

```{r}
## Merge C-INDEX and ARI
all_depmap <- all_depmap_cindex %>% 
  dplyr::select(id, lineage, cindex) %>% 
  dplyr::inner_join(all_depmap_ari, by = "id") %>% 
  dplyr::inner_join(all_depmap_purity %>% 
                      dplyr::select(id, purity),
                    by = "id") %>% 
  dplyr::mutate(combined_score = (purity + ari) / 2,
                method = paste0(method, ": ", combined_score))

## PLOT
ggplot(all_depmap, aes(x = factor1, y = factor2)) + 
  geom_point(aes(fill = lineage), color = "black", pch = 21, size = 3, alpha = 0.7) +
  labs(x = "Factor 1",
       y = "Factor 2") +
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.position = "top",
        text = element_text(size = 15)) +
  facet_wrap(~ method, nrow = 3, scales = "free") +
  scale_fill_viridis_d(end = 0.8)

ggsave(paste0(results_folder, "plot_overall.jpg"), width = 10, height = 10)

## BARPLOT
all_depmap2 <- all_depmap %>% 
  dplyr::mutate(method = gsub("\\:.*", "", method)) %>% 
  dplyr::distinct(method, .keep_all = TRUE)

ggplot(all_depmap2, aes(x = combined_score, y = reorder(method, combined_score))) + 
  geom_col(alpha = 0.7) +
  # geom_vline(xintercept = quantile(all_depmap2$combined_score, 0.25), linetype = "dashed", alpha = 0.7) +
  # geom_vline(xintercept = quantile(all_depmap2$combined_score, 0.50), linetype = "dashed", alpha = 0.7) +
  geom_vline(xintercept = quantile(all_depmap2$combined_score, 0.75), linetype = "dashed", alpha = 0.7) +
  labs(x = "Composite Score",
       y = NULL) +
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.position = "top",
        text = element_text(size = 15)) +
  coord_cartesian(xlim = c(0.22, 0.65)) # +- 0.6

ggsave(paste0(results_folder, "barplot.jpg"), width = 5, height = 7)
```

