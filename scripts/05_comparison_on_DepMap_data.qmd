---
title: "SUB-BENCHMARK 5: Comparing jDR methods on DepMap datasets"
format: html
editor: visual
---

# SUB-BENCHMARK 5: Comparing jDR methods on DepMap datasets

We subset the same lineages we used for TCGA comparison (benchmark #2).

## Data preprocessing

```{r}
# Function from POMA package - BiocManager::install("POMA")
cleaning_multiomics <- function(data,
                                zero_cutoff = 0.3,
                                na_cutoff = 0.3) {
  
   data <- data %>%
     dplyr::rename("id" = 1) %>%
     tibble::column_to_rownames("id")

   ## Remove columns that only have NAs
   data <- data[, apply(data, 2, function(x) !all(is.na(x)))]

   ## Remove columns that only have zeros
   data <- data[, apply(data, 2, function(x) !all(x == 0, na.rm = TRUE))]

   ## Remove columns with var = 0
   data <- data[, !apply(data, 2, function(x){var(x, na.rm = TRUE)}) == 0]

   ## Remove columns that with more than x% of zeros
   data <- data[, colSums(data == 0, na.rm = TRUE)/nrow(data) < zero_cutoff]

   ## Remove columns that with more than x% of NAs
   data <- data[, !apply(data, 2, function(x){sum(is.na(x))/nrow(data)}) > na_cutoff]

   ## KNN imputation
   data <- t(data)
   data <- impute::impute.knn(data)
   data <- t(data$data)

   data <- apply(data, 2, function(x) (log(x + 1) - mean(log(x + 1), na.rm = TRUE))/sd(log(x + 1), na.rm = TRUE))

   data <- data %>%
     as.data.frame() %>%
     rownames_to_column("id")

   return(data)
}
```

```{r}
library(tidyverse)

# We excluded 'sarcoma' because there are too many subtypes in DepMap
tcga_lineages <- c('AML', 'breast', 'colorectal', 'kidney', 'liver', 'ovary', 'melanoma')

sample_info <- vroom::vroom("/Users/pol/Dropbox/gmv_project/data/22Q2/sample_info.csv", delim = ",") %>% 
  dplyr::select(DepMap_ID, lineage, lineage_subtype) %>% 
  dplyr::mutate(lineage = dplyr::case_when(lineage %in% c("skin", "blood") ~ lineage_subtype,
                                           !lineage %in% c("skin", "blood") ~ lineage)) %>% 
  dplyr::filter(lineage %in% tcga_lineages) %>% 
  dplyr::select(DepMap_ID, lineage) %>% 
  dplyr::arrange(DepMap_ID)

# EXPRESSION --------------------------
expression <- vroom::vroom("/Users/pol/Dropbox/gmv_project/data/22Q2/Expression_22Q2_Public.csv", delim = ",") %>% 
  dplyr::rename(DepMap_ID = 1) %>% 
  dplyr::filter(DepMap_ID %in% sample_info$DepMap_ID)

# METHYLATION --------------------------
methylation <- vroom::vroom("/Users/pol/Dropbox/gmv_project/data/22Q2/Methylation_(1kb_upstream_TSS).csv", delim = ",") %>% 
  dplyr::rename(DepMap_ID = 1) %>% 
  dplyr::filter(DepMap_ID %in% sample_info$DepMap_ID)

# miRNA --------------------------
mirna <- vroom::vroom("/Users/pol/Dropbox/gmv_project/data/22Q2/miRNA_Expression.csv", delim = ",") %>% 
  dplyr::rename(DepMap_ID = 1) %>% 
  dplyr::filter(DepMap_ID %in% sample_info$DepMap_ID)

# METABOLOMICS --------------------------
metabolomics <- vroom::vroom("/Users/pol/Dropbox/modp/data/Metabolomics.csv", delim = ",") %>% 
  dplyr::rename(DepMap_ID = 1) %>% 
  dplyr::filter(DepMap_ID %in% sample_info$DepMap_ID)

# ALL CELLS --------------------------
all_cells <- dplyr::intersect(expression$DepMap_ID, methylation$DepMap_ID)
all_cells <- dplyr::intersect(mirna$DepMap_ID, all_cells)
all_cells <- dplyr::intersect(metabolomics$DepMap_ID, all_cells)

# EXPRESSION --------------------------
expression_clean <- expression %>%
  dplyr::filter(DepMap_ID %in% all_cells)

expression_clean <- cleaning_multiomics(expression_clean)

sum(apply(expression_clean, 2, function(x){sum(is.na(x))}))

# METHYLATION --------------------------
methylation_clean <- methylation %>%
  dplyr::filter(DepMap_ID %in% all_cells)

methylation_clean <- cleaning_multiomics(methylation_clean)

sum(apply(methylation_clean, 2, function(x){sum(is.na(x))}))

# miRNA --------------------------
mirna_clean <- mirna %>%
  dplyr::filter(DepMap_ID %in% all_cells)

mirna_clean <- cleaning_multiomics(mirna_clean)

sum(apply(mirna_clean, 2, function(x){sum(is.na(x))}))

# METABOLOMICS --------------------------
metabolomics_clean <- metabolomics %>%
  dplyr::filter(DepMap_ID %in% all_cells)

metabolomics_clean <- cleaning_multiomics(metabolomics_clean)

sum(apply(metabolomics_clean, 2, function(x){sum(is.na(x))}))

# ARRANGE ALL --------------------------
expression_clean <- expression_clean %>%
  dplyr::arrange(id) %>% 
  dplyr::select(id, sort(tidyselect::peek_vars())) %>% 
  tibble::column_to_rownames("id")

methylation_clean <- methylation_clean %>%
  dplyr::arrange(id) %>% 
  dplyr::select(id, sort(tidyselect::peek_vars())) %>% 
  tibble::column_to_rownames("id")

mirna_clean <- mirna_clean %>%
  dplyr::arrange(id) %>% 
  dplyr::select(id, sort(tidyselect::peek_vars())) %>% 
  tibble::column_to_rownames("id")

metabolomics_clean <- metabolomics_clean %>%
  dplyr::arrange(id) %>% 
  dplyr::select(id, sort(tidyselect::peek_vars())) %>% 
  tibble::column_to_rownames("id")

sample_info <- sample_info %>% 
  dplyr::filter(DepMap_ID %in% all_cells)

# Save
write.table(t(expression_clean), "../data/DepMap/expression.txt", 
            sep="\t", col.names=TRUE, row.names=TRUE)
write.table(t(methylation_clean), "../data/DepMap/methylation.txt", 
            sep="\t", col.names=TRUE, row.names=TRUE)
write.table(t(mirna_clean), "../data/DepMap/mirna.txt", 
            sep="\t", col.names=TRUE, row.names=TRUE)
write.table(t(metabolomics_clean), "../data/DepMap/metabolomics.txt", 
            sep="\t", col.names=TRUE, row.names=TRUE)

save(expression_clean, methylation_clean, mirna_clean, metabolomics_clean, sample_info,
     file = "../data/DepMap/depmap_multiomics.RData")
```

## Running comparison

```{r}
source("runfactorization.R")

# Folder for results
results_folder <- "../results_DepMap/"
# Create output folder
dir.create(results_folder, showWarnings = FALSE)

# Run factorization methods
out <- runfactorization("../data/DepMap/",
                        c("expression.txt", "methylation.txt", "mirna.txt", "metabolomics.txt"),
                        num.factors = 2, 
                        min_pts = 10, # manual tuning
                        compute_features = FALSE,
                        sep="\t", 
                        filtering="stringent")

save(out, file = "../results_DepMap/factorization.RData")
```

