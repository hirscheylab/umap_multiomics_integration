---
title: "SUB-BENCHMARK 4: Comparing jDR methods on single-cell datasets"
format: html
editor: visual
---

# SUB-BENCHMARK 4: Comparing jDR methods on single-cell datasets

The performances of the 9 jDR methods are here compared based on their ability to cluster cells based on their cancer cell line of origine. The clustering is performed jointly considering scRNA-seq and scATAC-seq data.

## Data preprocessing

First the data are read in their original format and adapted to be read as input of our run_factorization function.

```{r}
# Load data and processing

# Load RNA-seq data
exp <- readRDS("../data/single-cell/CellLines_RNAseqCounts.RDS", refhook = NULL) #ENS for genes and counts
# Apply log2 on RNA-seq data
exp <- log2(exp+1)
# Load ATAC-seq data
atac_counts<-readRDS("../data/single-cell/CellLines_ATACseqCounts.RDS", refhook = NULL) # peaks counts
# Load metadata
metadata<-readRDS("../data/single-cell/CellLines_metadata.RDS", refhook = NULL)
# Rename columns from metadata
colnames(atac_counts) <- metadata[,1]

# Export RNA-seq data as tab-separated table
write.table(exp, "../data/single-cell/CellLines_RNAseqCounts.txt", 
            sep="\t", col.names=TRUE, row.names=TRUE)
# Add a name ("probe") to the first column
# system("sed -i '1s/^/probe\t/' ../data/single-cell/CellLines_RNAseqCounts.txt")
# Export ATAC-seq data as tab-separated table
write.table(atac_counts, "../data/single-cell/CellLines_ATACseqCounts.txt", 
            sep="\t", col.names=TRUE, row.names=TRUE)
# Add a name ("probe") to the first column
# system("sed -i '1s/^/probe\t/' ../data/single-cell/CellLines_ATACseqCounts.txt")
```

## Running comparison

Two factor are then detected for each jDR method and the distribution of the cells with respect of Factor1 and Factor2 is plotted as a scatter plot. The obtained plots are available in the Results folder. The capability of the different jDR methods to cluster the cells accoridng to their cell line of origin is finally evaluated through the C-index, whose value is reported in the Results folder.

```{r}
library("ggplot2")
library("clusterCrit")
source("runfactorization.R")

# Parameters for the plots
dot_size <- 1.5
dot_alpha <- 1.0
xlabel <- "Factor 1"
ylabel <- "Factor 2"

# Load annotations from the metadata
sample_annot <- metadata[, c("sample.rna", "celltype")]

# Folder for results
results_folder <- "../results_single_cell/"
# Create output folder
dir.create(results_folder, showWarnings = FALSE)

# Run factorization methods
out <- runfactorization("../data/single-cell/",
                        c("CellLines_RNAseqCounts.txt", "CellLines_ATACseqCounts.txt"),
                        num.factors = 2, 
                        min_pts = 10,
                        compute_features = FALSE,
                        sep="\t", 
                        filtering="stringent")

save(out, file = paste0(results_folder, "factorization.RData"))
```

```{r}
c_index <- numeric(0)

# For each factorization method
for(i in 1:length(out$factorizations)){
    
    # Get factorization result
    factors <- out$factorizations[[i]][[1]]

    # Delete NAs
    factors <- factors[!is.na(factors[,1]) & !is.na(factors[,2]), ]
    sample_annot <- sample_annot[!is.na(sample_annot[,1]) & !is.na(sample_annot[,2]), ]

    # Data to be plotted
    df <- data.frame(x =  factors[,1], y = factors[,2], color_by = sample_annot[,2])
    # Plot results
    p <- ggplot(df, aes_string(x = "x", y = "y")) + 
       geom_point(aes_string(color = "color_by"), size=dot_size, alpha=dot_alpha) + 
       xlab(xlabel) + 
       ylab(ylabel) +
       # scale_shape_manual(values=c(19,1,2:18)[seq_along(unique(shape_by))]) +
       theme(plot.margin = margin(20, 20, 10, 10), 
             axis.text = element_text(size = rel(1), color = "black"), 
             axis.title = element_text(size = 16), 
             axis.title.y = element_text(size = rel(1.1), margin = margin(0, 10, 0, 0)), 
             axis.title.x = element_text(size = rel(1.1), margin = margin(10, 0, 0, 0)), 
             axis.line = element_line(color = "black", size = 0.5), 
             axis.ticks = element_line(color = "black", size = 0.5),
             panel.border = element_blank(), 
             panel.grid.major = element_blank(),
             panel.grid.minor = element_blank(), 
             panel.background = element_blank(),
             legend.key = element_rect(fill = "white"),
             legend.text = element_text(size = 16),
             legend.title = element_text(size =16)
       )
    p + scale_color_manual(values=c("#0072B2", "#D55E00", "#CC79A7"))
    # Export plot as JPEG image
    if (out$method[i] == "UBMI") {
      out$method[i] <- "GAUDI"
    }
    ggsave(paste0(results_folder, "plot_", out$method[i],".jpg"))

    # Encode cell type annotations by numeric codes
    ann <- factor(sample_annot[,2], levels=c("HCT", "Hela", "K562"))
    ann <- as.integer(ann)
    # Compare factors and annotations
    c_index <- c(c_index, intCriteria(as.matrix(factors), as.integer(ann), crit=c("C_index"))$c_index)

}

# Build output table
report_cindex <- data.frame(method=out$method, cindex=c_index)

# Export results as one tab-separated table
write.table(report_cindex, file = paste0(results_folder, "singlecell_cindex.txt"), 
            sep="\t", col.names=FALSE, row.names=FALSE, quote=FALSE)
```

```{r}
## Final plots
rgcca <- as.data.frame(out$factorizations[[1]][[1]])
rgcca$method <- "RGCCA"
colnames(rgcca)[1:2] <- c("factor1", "factor2")

mcia <- as.data.frame(out$factorizations[[2]][[1]])
mcia$method <- "MCIA"
colnames(mcia)[1:2] <- c("factor1", "factor2")

mofa <- as.data.frame(out$factorizations[[3]][[1]])
mofa$method <- "MOFA"
colnames(mofa)[1:2] <- c("factor1", "factor2")

intnmf <- as.data.frame(out$factorizations[[4]][[1]])
intnmf$method <- "intNMF"
colnames(intnmf)[1:2] <- c("factor1", "factor2")

jive <- as.data.frame(out$factorizations[[5]][[1]])
jive$method <- "JIVE"
colnames(jive)[1:2] <- c("factor1", "factor2")

tica <- as.data.frame(out$factorizations[[6]][[1]])
tica$method <- "tICA"
colnames(tica)[1:2] <- c("factor1", "factor2")

gaudi <- as.data.frame(out$factorizations[[7]][[1]])
gaudi$method <- "GAUDI"
colnames(gaudi)[1:2] <- c("factor1", "factor2")

report_cindex$method <- gsub("UBMI", "GAUDI", report_cindex$method)

## Merge methods and plot
all_sc <- rbind(rgcca, mcia, mofa, intnmf, jive, tica, gaudi) %>% 
  as.data.frame() %>% 
  rownames_to_column("id") %>% 
  mutate(type = case_when(grepl("HCT", id) ~ "HCT",
                          grepl("Hela", id) ~ "Hela",
                          grepl("K562", id) ~ "K562")) %>% 
  left_join(report_cindex, by = "method") %>% 
  mutate(method = paste0(method, ": ", round(cindex, 3)))

ggplot(all_sc, aes(x = factor1, y = factor2)) + 
  geom_point(aes(fill = type), color = "black", pch = 21, size = 3, alpha = 0.8) +
  labs(x = "Factor 1",
       y = "Factor 2") +
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.position = "top",
        text = element_text(size = 15)) +
  facet_wrap(~ method, nrow = 3, scales = "free") +
  scale_fill_manual(values = ggsci::pal_npg()(3))

ggsave(paste0(results_folder, "plot_overall.jpg"), width = 9, height = 9, dpi = 300)
```

## GAUDI Clusters

```{r}
gaudi_clusters <- data.frame(sample = rownames(gaudi), gaudi, clust = paste0("Cluster_", out$UBMI.clusters)) %>% 
  dplyr::filter(clust != "Cluster_0")

ggplot(gaudi_clusters, aes(x = factor1, y = factor2)) + 
  geom_point(aes(fill = clust), color = "black", pch = 21, size = 3, alpha = 0.8) +
  labs(x = "Factor 1",
       y = "Factor 2") +
  theme_classic() +
  theme(legend.title = element_blank(),
        legend.position = "top",
        text = element_text(size = 15)) +
  scale_fill_manual(values = ggsci::pal_npg()(4))

ggsave(paste0(results_folder, "plot_GAUDI_clusters.jpg"), width = 6, height = 5, dpi = 300)
```

## Cluster Differential Expression Analysis

```{r}
library(POMA)

gaudi_clusters_subset <- gaudi_clusters[gaudi_clusters$clust %in% c("Cluster_2", "Cluster_3"),]
exp_subset <- exp[, colnames(exp) %in% rownames(gaudi_clusters_subset)]

poma_obj <- PomaCreateObject(metadata = gaudi_clusters_subset[, c("sample", "clust")],
                             features = t(exp_subset))

limma_res <- poma_obj %>% 
  PomaLimma(contrast = "Cluster_2-Cluster_3")

nrow(limma_res[limma_res$adj_pvalue < 0.05,]) # 190 DE genes

saveRDS(limma_res, file = paste0(results_folder, "limma_res_cluster2_cluster3.Rds"))
# limma_res <- readRDS(file = paste0(results_folder, "limma_res_cluster2_cluster3.Rds"))

limma_res %>% 
  dplyr::select(feature, logFC, adj_pvalue) %>% 
  PomaVolcano(pval_cutoff = 0.05,
              log2fc_cutoff = 1.5,
              x_label = "log2 (Fold Change)",
              y_label = "-log10 (P-value)")

ggsave(paste0(results_folder, "volcanoplot_clusters_2_3_GAUDI.jpg"), width = 8, dpi = 300)
```

## Enrichment Analysis

### KEGG

```{r}
library(clusterProfiler)
library(org.Hs.eg.db)

## KEGG
feature_list <- limma_res %>%
  dplyr::arrange(dplyr::desc(logFC))

gene_list <- feature_list$logFC
names(gene_list) <- feature_list$feature

ids <- bitr(names(gene_list),
            fromType = "ENSEMBL",
            toType = "ENTREZID",
            OrgDb = org.Hs.eg.db)

feature_list_entrez <- feature_list %>%
  right_join(ids, by = c("feature" = "ENSEMBL"))

# Create a vector of the gene universe
kegg_gene_list <- feature_list_entrez$logFC
names(kegg_gene_list) <- feature_list_entrez$ENTREZID

kegg_res <- gseKEGG(geneList      = kegg_gene_list,
                    organism      = "hsa",
                    nPerm         = 10000,
                    minGSSize     = 10,
                    maxGSSize     = 500,
                    pvalueCutoff  = 0.05,
                    pAdjustMethod = "fdr",
                    keyType       = "ncbi-geneid")

dotplot(kegg_res,
        showCategory = 20,
        title = "",
        split = ".sign") +
  facet_grid(. ~ .sign) +
  theme(legend.position = "top")

ggsave(paste0(results_folder, "GSEA_KEGG.jpg"), width = 10, dpi = 300)
openxlsx::write.xlsx(kegg_res@result, file = paste0(results_folder, "GSEA_KEGG_table.xlsx"))
```

### Gene Ontology

```{r}
gene_list <- limma_res$logFC
names(gene_list) <- limma_res$feature

# omit any NA values 
gene_list <- na.omit(gene_list)

# sort the list in decreasing order (required for clusterProfiler)
gene_list <- sort(gene_list, decreasing = TRUE)

gse <- gseGO(geneList = gene_list, 
             ont = "BP", 
             keyType = "ENSEMBL", 
             nPerm = 10000, 
             minGSSize = 10, 
             maxGSSize = 500, 
             pvalueCutoff = 0.05, 
             verbose = TRUE, 
             OrgDb = org.Hs.eg.db, 
             pAdjustMethod = "fdr")

dotplot(gse, showCategory = 10, split = ".sign") + 
  facet_grid(. ~ .sign) +
  theme(legend.position = "top",
        text = element_text(size = 15))

ggsave(paste0(results_folder, "GSEA_GO.jpg"), width = 13, height = 9)
openxlsx::write.xlsx(kegg_res@result, file = paste0(results_folder, "GSEA_GO_table.xlsx"))
```
